plugins {
	id("org.jetbrains.kotlin.jvm") version "1.7.21"
	id("org.jetbrains.kotlin.kapt") version "1.7.21"
	id("org.jetbrains.kotlin.plugin.allopen") version "1.7.21"
	id("com.github.johnrengelman.shadow") version "7.1.2"
	id("io.micronaut.application") version "3.7.10"
	id("org.openapi.generator") version "6.4.0"
	id("java")
}

version = "0.1"
group = "io.gray"

repositories {
	mavenCentral()
}

dependencies {
	kapt("io.micronaut.data:micronaut-data-processor")
	kapt("io.micronaut:micronaut-http-validation")
	kapt("io.micronaut.security:micronaut-security-annotations")
	// https://mvnrepository.com/artifact/org.mindrot/jbcrypt
	implementation("org.mindrot:jbcrypt:0.4")
	implementation("io.micronaut:micronaut-http-client")
	implementation("io.micronaut:micronaut-jackson-databind")
	implementation("io.micronaut.data:micronaut-data-jdbc")
	implementation("io.micronaut.data:micronaut-data-r2dbc")
	implementation("io.micronaut.flyway:micronaut-flyway")
	implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
	implementation("io.micronaut.security:micronaut-security-jwt")
	implementation("jakarta.annotation:jakarta.annotation-api")
	implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
	implementation("io.micronaut:micronaut-validation")
	runtimeOnly("ch.qos.logback:logback-classic")

	//db drivers
	runtimeOnly("org.postgresql:r2dbc-postgresql")
	runtimeOnly("io.r2dbc:r2dbc-pool")
	runtimeOnly("org.postgresql:postgresql")

	//for emailing
	implementation 'com.sun.mail:jakarta.mail:2.0.1'
	implementation 'com.google.api-client:google-api-client:2.0.0'
	implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
	implementation 'com.google.apis:google-api-services-gmail:v1-rev20220404-2.0.0'

	// https://mvnrepository.com/artifact/io.github.resilience4j/resilience4j-micronaut
	implementation("io.github.resilience4j:resilience4j-micronaut:${resilience4jVersion}")
	implementation("io.github.resilience4j:resilience4j-ratelimiter:${resilience4jVersion}")
	implementation("io.github.resilience4j:resilience4j-consumer:${resilience4jVersion}")
	implementation("io.github.resilience4j:resilience4j-reactor:${resilience4jVersion}")

	runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
	testRuntimeOnly("io.r2dbc:r2dbc-h2")
	testRuntimeOnly("com.h2database:h2")
}


application {
	mainClass.set("io.gray.ApplicationKt")
}
java {
	sourceCompatibility = JavaVersion.toVersion("17")
	targetCompatibility = JavaVersion.toVersion("17")
}

tasks {
	compileKotlin {
		kotlinOptions {
			jvmTarget = "17"
		}
	}
	compileTestKotlin {
		kotlinOptions {
			jvmTarget = "17"
		}
	}
}
graalvmNative.toolchainDetection = false
micronaut {
	version = "3.9.4"
	runtime("netty")
	testRuntime("junit5")
	processing {
		incremental(true)
		annotations("io.gray.*")
	}
}


// nhl api object generation
openApiGenerate {
	generatorName = "java-micronaut-client"
	inputSpec = "$rootDir/src/main/resources/nhl.yaml"
	outputDir = "$buildDir/generated/sources/openapi"
	apiPackage = "io.gray.nhl.api"
	invokerPackage = "io.gray.nhl.api"
	modelPackage = "io.gray.nhl.model"
	configOptions = [
			datetimeFormat: "yyyy-MM-dd'T'HH:mm:ss'Z'",
			dateLibrary: "java8-localdatetime"
	]
}
compileKotlin.dependsOn tasks.openApiGenerate
sourceSets.main.java.srcDirs += "$buildDir/generated/sources/openapi/src/main/java"
